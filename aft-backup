#!/usr/bin/env python3
#
# Copyright 2022 Euphon Ltd.
#
# Authors:
#     Fam Zheng <fam@euphon.net>
#
# This work is licensed under the MIT License.  Please see the LICENSE file or
# http://opensource.org/licenses/MIT.

import os
import sys
import time
import shutil
import logging
import argparse
import subprocess

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--dst", '-d', required=True)
    parser.add_argument("--src", '-s', default="DCIM/Camera")
    parser.add_argument("--bounce", '-b')
    return parser.parse_args()

class MtpBackupJob(object):
    def __init__(self, args):
        self.args = args

    def run(self):
        logging.info("getting file names...")
        af = self.list_files();
        logging.info("%d files in total" % len(af))
        candidates = [x for x in af if self.need_backup(x)]
        logging.info("backing up %d files ..." % len(candidates))
        self.backup(candidates)

    def aft_do_cmd(self, cmd):
        sp = subprocess.Popen(['aft-mtp-cli', '-b'],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                encoding='utf-8'
                )
        if isinstance(cmd, list):
            cmd = "\n\r".join(cmd)
        out, err = sp.communicate(cmd + "\n\rquit\n\r")
        return out.splitlines()[1:]

    def list_files(self):
        out = self.aft_do_cmd('ls "%s"' % self.args.src)
        ret = []
        for x in out:
            fs = x.split(maxsplit=1)
            ret.append(fs[1])
        return ret

    def need_backup(self, x):
        if os.path.exists(os.path.join(self.args.dst, x)):
            return False
        return True

    def backup(self, files):
        total = len(files)
        if self.args.bounce:
            dst = self.args.bounce
            subprocess.check_output(['mkdir', '-p', dst])
            if os.listdir(dst):
                raise Exception("Bounce directory is not empty")
        else:
            dst = self.args.dst
        for i, fn in enumerate(files):
            self.aft_do_cmd(
                'get "%s" "%s"' % (
                    os.path.join(self.args.src, fn),
                    os.path.join(dst, fn))
            )
            print("%d / %d (%.1f%%)" % (
                i + 1,
                total,
                100 * (i + 1) / float(total)))
        if self.args.bounce:
            a = os.listdir(dst)
            total = len(a)
            for i, x in enumerate(a):
                s = os.path.join(dst, x)
                print("[%d/%d] %s" % (i, total, s))
                shutil.copy(s, self.args.dst)
                os.unlink(s)

def main():
    args = parse_args()
    logging.basicConfig(level=logging.INFO)
    
    job = MtpBackupJob(args)
    job.run()

if __name__ == "__main__":
    sys.exit(main())
